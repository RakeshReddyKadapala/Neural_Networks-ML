# -*- coding: utf-8 -*-
"""Q2_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-kTotKYiEAP00dz-4reD-o35coJT862a
"""

#Mounting google drive and importing libraries

import pandas as pd
import numpy as np
from scipy.optimize import minimize
import scipy.stats as stats
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import metrics
import seaborn as sns
from sklearn import metrics
salary_dataset=pd.read_csv("C:\\Users\\Admin\\OneDrive\\Desktop\\Salary_dataset.csv")
salary_dataset

#Removing unnamed column
salary_dataset.drop(salary_dataset.columns[0],axis=1,inplace=True)
salary_dataset

#Performing null check
salary_dataset.isnull().sum()

"""Implementing linear regression from scratch"""

x = salary_dataset['YearsExperience']
y = salary_dataset['Salary']
#Preparing training set & test set
x_train_for_lin_reg,x_test_for_lin_reg,y_train_for_lin_reg,y_test_for_lin_reg=train_test_split(x,y,test_size=0.2,random_state=15)

def linear_regression(x, y):     
    N = len(x)
    x_mean = x.mean()
    y_mean = y.mean()
    
    B1_num = ((x - x_mean) * (y - y_mean)).sum()
    B1_den = ((x - x_mean)**2).sum()
    B1 = B1_num / B1_den
    
    B0 = y_mean - (B1*x_mean)
    
    reg_line = 'y = {} + {}Î²'.format(B0, round(B1, 3))
    
    return (B0, B1, reg_line)

N = len(x)
x_mean = x.mean()
y_mean = y.mean()

B1_num = ((x - x_mean) * (y - y_mean)).sum()
B1_den = ((x - x_mean)**2).sum()
B1 = B1_num / B1_den

B0 = y_mean - (B1 * x_mean)

def corr_coef(x, y):
    N = len(x)
    
    num = (N * (x*y).sum()) - (x.sum() * y.sum())
    den = np.sqrt((N * (x**2).sum() - x.sum()**2) * (N * (y**2).sum() - y.sum()**2))
    R = num / den
    return R

B0, B1, reg_line = linear_regression(x, y)
print('Regression Line: ', reg_line)
R = corr_coef(x, y)
print('Correlation Coef.: ', R)
print('"Goodness of Fit": ', R**2)

plt.figure(figsize=(12,5))
plt.scatter(x, y, s=300, linewidths=1, edgecolor='black')
text = '''X Mean: {} Years
Y Mean: ${}
R: {}
R^2: {}
y = {} + {}X'''.format(round(x.mean(), 2), 
                       round(y.mean(), 2), 
                       round(R, 4), 
                       round(R**2, 4),
                       round(B0, 3),
                       round(B1, 3))
plt.text(x=1, y=100000, s=text, fontsize=12, bbox={'facecolor': 'grey', 'alpha': 0.2, 'pad': 10})
plt.title('How Experience Affects Salary')
plt.xlabel('Years of Experience', fontsize=15)
plt.ylabel('Salary', fontsize=15)
plt.plot(x, B0 + B1*x, c = 'r', linewidth=5, alpha=.5, solid_capstyle='round')
plt.scatter(x=x.mean(), y=y.mean(), marker='*', s=10**2.5, c='r') # average point

def predict(B0, B1, new_x):
    y = B0 + B1 * new_x
    return y

"""Report error for both training and testing set for linear regression"""

y_pred_for_linear_regr=[]
for elem in x_test_for_lin_reg:
  y_pred_for_linear_regr.append(predict(B0, B1, elem))

print("Mean absolute error (MAE) using linear regression for test set:", metrics.mean_absolute_error(y_test_for_lin_reg,y_pred_for_linear_regr))
print("Mean square error (MSE) using linear regression for test set:", metrics.mean_squared_error(y_test_for_lin_reg,y_pred_for_linear_regr))
print("Median absolute error (MDAE) using linear regression for test set:", metrics.median_absolute_error(y_test_for_lin_reg,y_pred_for_linear_regr))
print("R-squared value of predictions using linear regression for test set:",metrics.r2_score(y_test_for_lin_reg,y_pred_for_linear_regr))

y_pred_for_linear_regr_train_set=[]
for elem in x_train_for_lin_reg:
  y_pred_for_linear_regr_train_set.append(predict(B0, B1, elem))

print("Mean absolute error (MAE) using linear regression for training set:", metrics.mean_absolute_error(y_train_for_lin_reg,y_pred_for_linear_regr_train_set))
print("Mean square error (MSE) using linear regression for training set:", metrics.mean_squared_error(y_train_for_lin_reg,y_pred_for_linear_regr_train_set))
print("Median absolute error (MDAE) using linear regression for training set:", metrics.median_absolute_error(y_train_for_lin_reg,y_pred_for_linear_regr_train_set))
print("R-squared value of predictions using linear regression for training set:",metrics.r2_score(y_train_for_lin_reg,y_pred_for_linear_regr_train_set))

"""(a) Implement Maximum likelihood estimator from scratch for regression task."""

#segregating dependent and independent variables
X = salary_dataset['YearsExperience'][:100]
Y = salary_dataset['Salary'][:100]

#Splitting data in training set and test set
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=15)

#Defining log likelihood function
def lik(parameters, x, y): 
    m = parameters[0] 
    b = parameters[1] 
    sigma = parameters[2] 
    
    y_exp = m * x + b 
        
    L = np.sum(stats.norm.logpdf(y - y_exp, loc = 0, scale=sigma))
    return -L


def constraints(parameters):
    sigma = parameters[2]
    return sigma

cons = {
    'type': 'ineq',
    'fun': constraints
}

#Executing MLE
lik_model = minimize(lik, np.array([2, 2, 2]), args=(X,Y,), constraints=cons,method='L-BFGS-B')
lik_model

#Plotting datapoint using MLE
fig, ax = plt.subplots()
ax.plot(X,Y, 'b*')
xx = np.linspace(np.min(X), np.max(X), 100)
yy = lik_model.x[0] * xx +  lik_model.x[1]
ax.plot(xx,yy, 'r-')  
plt.xlabel('Years Of Experience')
plt.ylabel('Salary')
plt.show()

#Calculating predicted values for test set
y_pred_using_log_likelihood = lik_model.x[0] * x_test +  lik_model.x[1]

"""(c) Report error for both training and testing set."""

#Printing mean absolute error for test set
print("Mean absolute error (MAE) using maximum likelihood estimator:", metrics.mean_absolute_error(y_test,y_pred_using_log_likelihood))

#Printing mean square error for test set
print("Mean square error (MSE) using maximum likelihood estimator:", metrics.mean_squared_error(y_test,y_pred_using_log_likelihood))

#Printing median absolute error for test set
print("Median absolute error (MDAE) using maximum likelihood estimator:", metrics.median_absolute_error(y_test,y_pred_using_log_likelihood))

#Calculating predicted values for training set
y_pred_for_train_using_log_likelihood = lik_model.x[0] * x_train +  lik_model.x[1]

#Printing mean absolute error for training set
print("Mean absolute error (MAE) for training set using maximum likelihood estimator:", metrics.mean_absolute_error(y_train,y_pred_for_train_using_log_likelihood))

#Printing mean square error for training set
print("Mean square error (MSE) for training set using maximum likelihood estimator:", metrics.mean_squared_error(y_train,y_pred_for_train_using_log_likelihood))

#Printing median absolute error for training set
print("Median absolute error (MDAE) for training set using maximum likelihood estimator:", metrics.median_absolute_error(y_train,y_pred_for_train_using_log_likelihood))